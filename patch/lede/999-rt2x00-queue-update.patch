Only in backports-2017-11-01/drivers/net/wireless/ralink/rt2x00: limit
diff -c -r backports-2017-11-01-orig/drivers/net/wireless/ralink/rt2x00/rt2800mmio.c backports-2017-11-01/drivers/net/wireless/ralink/rt2x00/rt2800mmio.c
*** backports-2017-11-01-orig/drivers/net/wireless/ralink/rt2x00/rt2800mmio.c	2015-06-16 13:02:30.000000000 +0300
--- backports-2017-11-01/drivers/net/wireless/ralink/rt2x00/rt2800mmio.c	2015-09-04 11:50:09.665148666 +0300
***************
*** 709,715 ****
  
  	switch (queue->qid) {
  	case QID_RX:
! 		queue->limit = 128;
  		queue->data_size = AGGREGATION_SIZE;
  		queue->desc_size = RXD_DESC_SIZE;
  		queue->winfo_size = rxwi_size;
--- 709,715 ----
  
  	switch (queue->qid) {
  	case QID_RX:
! 		queue->limit = 256;
  		queue->data_size = AGGREGATION_SIZE;
  		queue->desc_size = RXD_DESC_SIZE;
  		queue->winfo_size = rxwi_size;
***************
*** 720,726 ****
  	case QID_AC_VI:
  	case QID_AC_BE:
  	case QID_AC_BK:
! 		queue->limit = 64;
  		queue->data_size = AGGREGATION_SIZE;
  		queue->desc_size = TXD_DESC_SIZE;
  		queue->winfo_size = txwi_size;
--- 720,726 ----
  	case QID_AC_VI:
  	case QID_AC_BE:
  	case QID_AC_BK:
! 		queue->limit = 256;
  		queue->data_size = AGGREGATION_SIZE;
  		queue->desc_size = TXD_DESC_SIZE;
  		queue->winfo_size = txwi_size;
diff -c -r backports-2017-11-01-orig/drivers/net/wireless/ralink/rt2x00/rt2x00mac.c backports-2017-11-01/drivers/net/wireless/ralink/rt2x00/rt2x00mac.c
*** backports-2017-11-01-orig/drivers/net/wireless/ralink/rt2x00/rt2x00mac.c	2015-06-16 13:02:30.000000000 +0300
--- backports-2017-11-01/drivers/net/wireless/ralink/rt2x00/rt2x00mac.c	2015-09-04 11:47:45.845449209 +0300
***************
*** 26,31 ****
--- 26,32 ----
  
  #include "rt2x00.h"
  #include "rt2x00lib.h"
+ #include "rt2x00queue.h"
  
  static int rt2x00mac_tx_rts_cts(struct rt2x00_dev *rt2x00dev,
  				struct data_queue *queue,
***************
*** 115,120 ****
--- 116,141 ----
  	if (!test_bit(DEVICE_STATE_PRESENT, &rt2x00dev->flags))
  		goto exit_free_skb;
  
+ 	/* Dirty hack for Queue overrun protection,
+ 	 * if AC_VO/AC_VI/AC_BE is full, use next queue.
+ 	 * if AC_BK is full use previous queue.
+ 	 */
+ 	if (qid < 4) {
+ 		queue = rt2x00queue_get_tx_queue(rt2x00dev,qid);
+ 		if (unlikely(rt2x00queue_full(queue))){
+ 			switch(qid){
+ 				case 0: /* QID_AC_VO */
+ 				case 1: /* QID_AC_VI */
+ 				case 2: /* QID_AC_BE */
+ 					qid++;
+ 					break;
+ 				case 3: /* QID_AC_BK */
+ 					qid--;
+ 					break;
+ 			}
+ 		}
+ 	}
+ 	
  	/*
  	 * Use the ATIM queue if appropriate and present.
  	 */
diff -c -r backports-2017-11-01-orig/drivers/net/wireless/ralink/rt2x00/rt2x00queue.c backports-2017-11-01/drivers/net/wireless/ralink/rt2x00/rt2x00queue.c
*** backports-2017-11-01-orig/drivers/net/wireless/ralink/rt2x00/rt2x00queue.c	2015-03-10 05:37:16.000000000 +0200
--- backports-2017-11-01/drivers/net/wireless/ralink/rt2x00/rt2x00queue.c	2015-09-04 11:49:37.911446071 +0300
***************
*** 1211,1226 ****
  static void rt2x00queue_init(struct rt2x00_dev *rt2x00dev,
  			     struct data_queue *queue, enum data_queue_qid qid)
  {
  	mutex_init(&queue->status_lock);
  	spin_lock_init(&queue->tx_lock);
  	spin_lock_init(&queue->index_lock);
  
  	queue->rt2x00dev = rt2x00dev;
  	queue->qid = qid;
! 	queue->txop = 0;
! 	queue->aifs = 2;
! 	queue->cw_min = 5;
! 	queue->cw_max = 10;
  
  	rt2x00dev->ops->queue_init(queue);
  
--- 1211,1250 ----
  static void rt2x00queue_init(struct rt2x00_dev *rt2x00dev,
  			     struct data_queue *queue, enum data_queue_qid qid)
  {
+ 	/* Use default values for each queue type */
+ 	unsigned short cwmin = 5, cwmax = 10, aifs = 2, txop = 0;
+ 	
+ 	switch (qid) {
+ 		case QID_AC_VO:
+ 			cwmin = 2;
+ 			cwmax = 3;
+ 			txop = 47;
+ 			break;
+ 		case QID_AC_VI:
+ 			cwmin = 3;
+ 			cwmax = 4;
+ 			txop = 94;
+ 			break;
+ 		case QID_AC_BE:
+ 			cwmin = 4;
+ 			aifs = 3;
+ 			break;
+ 		case QID_AC_BK:
+ 			cwmin = 4;
+ 			aifs = 7;
+ 			break;
+ 	}
+ 	
  	mutex_init(&queue->status_lock);
  	spin_lock_init(&queue->tx_lock);
  	spin_lock_init(&queue->index_lock);
  
  	queue->rt2x00dev = rt2x00dev;
  	queue->qid = qid;
! 	queue->txop = txop;
! 	queue->aifs = aifs;
! 	queue->cw_min = cwmin;
! 	queue->cw_max = cwmax;
  
  	rt2x00dev->ops->queue_init(queue);
  
